<project name="AutomationTesting" basedir="." default="RunAutomation" xmlns:props="antlib:org.apache.ant.props">

    <!--======================= BEGIN [The common part of all the targets in this xml file] =======================-->
    <property environment="JenkinsEnv"/>
    
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${JenkinsEnv.ANT_HOME}\\ant-contrib.jar"/>
        </classpath>
    </taskdef>
    
    <!-- Below is used for variable names that including other variable -->
    <typedef uri="antlib:org.apache.ant.props" resource="org/apache/ant/props/antlib.xml" classpath="${JenkinsEnv.ANT_HOME}\\ant-props-1.0Alpha.jar" />
    <propertyhelper>
        <props:nested/>
    </propertyhelper>
    
    <!-- ******************************************************************************************************* -->
    <property file="./Build.Properties"/>
    <property environment="JenkinsEnv"/>
    <!-- <echo message="${JenkinsEnv.JENKINS_URL}"/> -->
    
    <!-- ******************************************************************************************************* -->
    
    <!--======================= END [The common part of all the targets in this xml file] =======================-->
    
    <!--RunAutomation is main target,it call other target to run-->
    <target name="RunAutomation">
    
        <trycatch property="ErrorMsg">
            <try>
                <antcall target="InitJenkinsServerJobWorkSpace"/>
                <!--antcall target="CheckInstaller"/-->
                <antcallback target="DeployTestVM" return="TestVMFQDN,TestVMUser,TestVMPassword,TestVMDomain"/>
                <antcall target="CopyFilesToTestVM">
                   <param name="Source" value="${JobWorkSpace.dir}\Code"/>
                   <param name="Destination" value="\\${TestVMFQDN}\c$"/>
                   <param name="User" value="${TestVMDomain}\${TestVMUser}"/>
                   <param name="Password" value="${TestVMPassword}"/>
                </antcall>
                <antcall target="RunTestCasesOnVM1">
                   <param name="Computer" value="${TestVMFQDN}"/>
                   <param name="User" value="${TestVMDomain}\${TestVMUser}"/>
                   <param name="Password" value="${TestVMPassword}"/>
                </antcall>
                <antcall target="CleanTestVM"/>
                <!--antcall target="ProcessTestCasesResults"/-->
            </try>
            <catch>
                <echo> ERROR happened: &lt;${ErrorMsg}&gt; </echo>
                <fail message="Due to Exception happened, automation running was terminated."/>
                <antcall target="PowerOffVM"/>
            </catch>
        </trycatch>

    </target>
    
    
    <target name="InitJenkinsServerJobWorkSpace">
        <echo message="Job WorkSpace is:${JobWorkSpace.dir}"/>
        <tstamp>
            <format property="TimeLogging" pattern="MM-dd-yyyy_HH-mm-ss" locale="en"/>
        </tstamp>
		 
        <tstamp>
            <format property="CopyrightYear" pattern="yyyy" locale="en"/>
        </tstamp>
		 
        <tstamp>
            <format property="BuildStartTime" pattern="MM/dd/yyyy HH:mm:ss" locale="en"/>
        </tstamp>
        <condition property="JobWorkSpace.dir.exists" else="false">
            <available file="${Automation.TestResults.dir}" type="dir"/>
        </condition>
		
        <echo message="${Automation.TestResults.dir}"/>
        <echo message="${Automation.TestLogs.dir}"/>
        <echo message="JobWorkSpace.dir.exists:${JobWorkSpace.dir.exists}"/>
        
        <if>
            <equals arg1="${JobWorkSpace.dir.exists}" arg2="false"/>
            <then>
                <echo message="Creating Automation.TestResults.dir and Automation.TestLogs.dir"/>
                <mkdir dir="${Automation.TestResults.dir}"/>
            </then>
            <else>
       	        <echo message="Deleting Automation.TestResults.dir:${Automation.TestResults.dir}"/>
       	        <delete includeemptydirs="true">
                    <fileset dir="${Automation.TestResults.dir}" includes="**/*"/>
                </delete>
            </else>
        </if>
    </target>
	
    <!-- Check if the installer exists in the QA VM -->
    <target name="CheckInstaller">
        <echo message="Check if installer exists in folder: ${JobWorkSpace.dir}\Code"/>
        <propertyregex property="installer.fullName"
                       input="${BuildName}"
                       regexp="^.*/(.+)$"
                       select="SoSSE_\1.exe"
                       casesensitive="false" />
        <condition property="installer.exists" else="false">
            <available file="${JobWorkSpace.dir}/Code/Installer/${installer.fullName}"/>
        </condition>
        <if>
            <equals arg1="${installer.exists}" arg2="false"/> 
            <then>
                <fail message="Fail to find installer in folder:${JobWorkSpace.dir}\Code\Installer\${installer.fullName}"/>
            </then>
        </if>
    </target>

    <!-- Deploy test VM in azure -->
    <target name="DeployTestVM">
        <exec dir="${JobWorkSpace.dir}\Scripts\" executable="powershell" timeout="7200000" failonerror="false" errorproperty="ErrorMessage" outputproperty="OutMessage" resultproperty="PowerShellErrorCode">
            <arg value="-File"/>
            <arg value="Deploy-TestVM.ps1"/>
            <arg line="-ParameterFile '${JobWorkSpace.dir}\${ParameterFile}'"/>
            <arg line="-TemplateFile '${JobWorkSpace.dir}\${TemplateFile}'"/>
            <arg line="-BuildId ${BuildId}"/>
        </exec>
        <echo message="${ErrorMessage}"/>
        <echo message="${OutMessage}"/>
        <if>
            <not>
                <equals arg1="${PowerShellErrorCode}" arg2="0"/> 
            </not>
            <then>
                <fail message="Fail to deploy ARM template: ${JobWorkSpace.dir}\${TemplateFile}"/>
            </then>
        </if>
        <!-- deploy script should display the vmName in output.
             looks like:
             Name                           Value
             virtualNetworkName             autotestVNET
             dnsNameForPublicIP             spotlighttestvm35
             virtualNetworkResourceGroup    AutoRG
             adminUsername                  sossemon
             vmName                         TestVM35
             adminPassword                  Quest123
             subnetName                     Subnet-1
             domainName                     AutoRG
             -->
        <propertyregex property="TestVMFQDN"
          input="${OutMessage}"
          regexp="vmName\s*(\w+)"
          select="\1.westus.cloudapp.azure.com"
          casesensitive="false" />
        <propertyregex property="TestVMUser"
          input="${OutMessage}"
          regexp="adminUsername\s*(\w+)"
          select="\1"
          casesensitive="false" />
        <propertyregex property="TestVMPassword"
          input="${OutMessage}"
          regexp="adminPassword\s*(\w+)"
          select="\1"
          casesensitive="false" />
        <propertyregex property="TestVMDomain"
          input="${OutMessage}"
          regexp="domainName\s*(\w+)"
          select="\1"
          casesensitive="false" />

        <echo message="DNS name of testvm: ${TestVMFQDN}; domain: ${TestVMDomain}; user: ${TestVMUser}; password ${TestVMPassword}"/>
    </target>

    <!-- Remove test VM in azure -->
    <target name="CleanTestVM">
        <exec dir="${JobWorkSpace.dir}\Scripts\" executable="powershell" timeout="600000" failonerror="false" errorproperty="ErrorMessage" outputproperty="OutMessage" resultproperty="PowerShellErrorCode">
            <arg value="-File"/>
            <arg value="Clean-TestVM.ps1"/>
            <arg line="-ParameterFile '${JobWorkSpace.dir}\${ParameterFile}'"/>
            <arg line="-BuildId ${BuildId}"/>
        </exec>
        <echo message="${ErrorMessage}"/>
        <echo message="${OutMessage}"/>
        <if>
            <not>
                <equals arg1="${PowerShellErrorCode}" arg2="0"/> 
            </not>
            <then>
                <fail message="Fail to clean VM"/>
            </then>
        </if>
    </target>

    <!-- Copy installer and test material to Test VM -->
    <target name="CopyFilesToTestVM">
        <exec dir="${JobWorkSpace.dir}\Scripts\" executable="powershell" timeout="600000" failonerror="false" errorproperty="ErrorMessage" outputproperty="OutMessage" resultproperty="PowerShellErrorCode">
            <arg value="-File"/>
            <arg value="Copy-RemoteFiles.ps1"/>
            <arg line="-Source '${Source}'"/>
            <arg line="-Destination '${Destination}'"/>
            <arg line="-Username '${User}'"/>
            <arg line="-Password '${Password}'"/>
        </exec>
        <echo message="${ErrorMessage}"/>
        <echo message="${OutMessage}"/>
        <if>
            <not>
                <equals arg1="${PowerShellErrorCode}" arg2="0"/> 
            </not>
            <then>
                <fail message="Fail to copy files to test vm"/>
            </then>
        </if>
    </target>   
	
    <target name="RunTestCasesOnVM1">
        <exec dir="${JobWorkSpace.dir}\Scripts\" executable="powershell" timeout="7200000" failonerror="false" errorproperty="ErrorMessage" outputproperty="OutMessage" resultproperty="PowerShellErrorCode">
            <arg value="-File"/>
            <arg value="Run-Test.ps1"/>
            <arg line="-Computer '${Computer}'"/>
            <arg line="-Username '${User}'"/>
            <arg line="-Password '${Password}'"/>
            <arg line="-Command 'hello world'"/>
        </exec>
        <echo message="${ErrorMessage}"/>
        <echo message="${OutMessage}"/>
        <if>
            <not>
                <equals arg1="${PowerShellErrorCode}" arg2="0"/> 
            </not>
            <then>
                <fail message="Fail to run test"/>
            </then>
        </if>

    </target>


    <target name="RunTestCasesOnVM">
    
        <echo message="-----------------Error code information--------------------------"/>
        <echo message="if wscript returns 0,it means testcase run successful!"/>
        <echo message="if wscript returns 1,it means testcase has a warning!"/>
        <echo message="if wscript returns 2,it means testcase run failed!"/>
        <echo message="if wscript returns 1000,it means Testcomplete was already running and testcomplete can not open the project."/>
        <echo message="-----------------------------------------------------------------"/>
        <!-- set condition for checking properties whether set on jenkins configuration -->
        <condition property="SecondVM.property.exists" else="false">
            <isset property="SecondVM"/>
        </condition>
        
        <condition property="TimeoutMs.property.exists" else="false">
            <isset property="TimeoutMs"/>
        </condition>
        
        <if>
            <equals arg1="${TimeoutMs.property.exists}" arg2="true"/>
            <then>
                <property name="timeout" value="${TimeoutMs}"/>
            </then>
            <else>
                <property name="timeout" value="7200000"/>
            </else>
        </if>
		
        <!-- check whether need start second VM for upgrade remote test -->
        <if>
            <equals arg1="${SecondVM.property.exists}" arg2="true"/>
            <then>
                <property name="TestParameterSet" value="${TestParameters},SecondVM=${SecondVM}"/>
            </then>
            <else>
                <property name="TestParameterSet" value="${TestParameters}"/>
            </else>
        </if>
        
        <echo message="-----------------Basic information------------------------------" />
        <echo>AutomationVM:                           ${FirstVM}</echo>
        <echo>AutomationVM.Automation.dir :           ${AutomationVM.Automation.dir}</echo>
        <echo>Automation TestUser:                    ${Automation.TestUser}</echo>
        <echo>Automation TestPassword:                ${Automation.TestPassword}</echo>
        <echo>Automation TestExecutable:              ${Automation.TestExecutable}</echo>
        <echo>Automation ProjectSuite:                ${Automation.pjs}</echo>
        <echo>Automation TestParameters:              ${TestParameterSet}</echo>
        <echo message="------------------------------------------------------------------" />
        
		<echo message="&quot;${AutomationVM.${Machine}.Local.dir}\RunGroup.vbs&quot; &quot;${Automation.TestExecutable}&quot; &quot;${AutomationVM.${Machine}.Local.dir}\${Automation.pjs}&quot; &quot;${TestCompleteProjectName}&quot; &quot;${RunGroupName}&quot; &quot;${TestParameterSet}&quot; ${timeout}" />
        <echo message="------------------------------------------------------------------" />
        <echo message="Sit back and relax, TestCase is running" />
        
        <exec executable="psexec" failonerror="false" timeout="${timeout}" outputproperty="PsexecOutput"
              errorproperty="PsexecErrorMsg" resultproperty="PsexecResultCode">
            <arg value="\\${FirstVM}"/>
            <arg value="-n"/>
            <arg value="60"/>
            <arg line="-u ${Automation.TestUser} -p ${Automation.TestPassword}"/> 
            <arg line="-i -h wscript"/>
            <arg line="&quot;${AutomationVM.${Machine}.Local.dir}&quot;\RunGroup.vbs ${Automation.TestExecutable} &quot;${AutomationVM.${Machine}.Local.dir}&quot;\&quot;${Automation.pjs}&quot; &quot;${TestCompleteProjectName}&quot; &quot;${RunGroupName}&quot; &quot;${TestParameterSet}&quot; ${timeout}"/>
        </exec>
        
        <echo message="===================Psexec Run Output==========================" />
        <echo message="${PsexecOutput}" />
        <echo message="${PsexecErrorMsg}" />
        <echo message="PsexecResultCode: ${PsexecResultCode}" />
        <echo message="===================Psexec Run Output==========================" />
		
		<if>
		   <not>
			  <equals arg1="${PsexecResultCode}" arg2="0"/>
		   </not>
		   <then>
			  <echo message="Calling TakeFailedSnapshotOnVM."/>
			  <antcall target= "TakeFailedSnapshotOnVM"/>
		   </then>
		</if>

    </target>
    
    <target name="ProcessTestCasesResults">
    
        <trycatch property="errormessage">
            <try>
                <!-- Reset the html report log dir -->
                <var name="AutomationVM.HtmlReport.dir" unset="true"/>
                <property name="AutomationVM.HtmlReport.dir" value="${AutomationVM.Automation.dir}\\Log"/>
                
                <path id="TestComplete.RawLogInXml.Folder"> 
                    <fileset dir="${AutomationVM.Automation.dir}/${TestCompleteProjectName}" includes="**/Log/**/{*}"/> 
                </path> 
                
                <path id="TestComplete.ConvertedLogInHtml.Folder"> 
                    <fileset dir="${AutomationVM.HtmlReport.dir}" includes="**/*"/> 
                </path> 
                
                <property name="TestComplete.RawResultsInXml"  refid="TestComplete.RawLogInXml.Folder"/> 
                
                <property name="TestComplete.ConvertedResultsInHtml"  refid="TestComplete.ConvertedLogInHtml.Folder"/> 
            </try>
            <catch>
                <echo message="Check TestComplete result exception: ${errormessage}"/>
            </catch>
        </trycatch>
        
        <condition property="TestComplete.Results.existed" else="false">
            <and>
                <not><equals arg1="" arg2="${TestComplete.RawResultsInXml}"/></not>
                <not><equals arg1="" arg2="${TestComplete.ConvertedResultsInHtml}"/></not> 
            </and>
        </condition> 
         
        <echo message="TestComplete finished running. Results is generated: ${TestComplete.Results.existed}"/>
         
        <if>
            <equals arg1="${TestComplete.Results.existed}" arg2="true"/>
            <then>
                <trycatch>
                    <try>
                        <!-- Copy the raw TC logs to jenkins test results folder:${Automation.TestResults.dir} -->
                        <copy todir="${Automation.TestResults.dir}" flatten="true" overwrite="true">
                            <fileset dir="${AutomationVM.Automation.dir}">
                                <include name="**/Log/**/{*}"/>
                            </fileset>
                        </copy>
                        
                        <!-- Copy the TestComplete converted log for jenkins html publisher folder. -->
                        <!-- The TestComplte result in html format is used by Jenkins to render the job report web pages. -->
                        <mkdir dir="${Automation.TestResults.dir}/html"/>
                        <copy todir="${Automation.TestResults.dir}/html">
                            <fileset dir="${AutomationVM.HtmlReport.dir}"/>
                        </copy>
						
						<!-- Copy support bundle to jenkins server --> 
                        <condition property="SupportBundle.exists" else="false">
                            <available file="${AutomationVM.Automation.dir}/${TestCompleteProjectName}/Support/SpotlightSupport.zip"/>
                        </condition>
                        
        				<echo message="Support bundle existed: ${SupportBundle.exists}"/>
                        
						<if>
                            <equals arg1="${SupportBundle.exists}" arg2="false"/>
                            <then>
                                <echo message="No support bundle file generated, will create a empty file instead..." />
                                <echo message="" file="${AutomationVM.Automation.dir}/${TestCompleteProjectName}/Support/SpotlightSupport.zip"/>
                            </then>
                        </if>
                        
                        <echo message="Copying support bundle from ${AutomationVM.Automation.dir}/${TestCompleteProjectName}/Support to ${Automation.TestResults.dir}/Support_Bundle" />
                        <mkdir dir="${Automation.TestResults.dir}/Support_Bundle"/>
                        <copy todir="${Automation.TestResults.dir}/Support_Bundle">
                            <fileset dir="${AutomationVM.Automation.dir}/${TestCompleteProjectName}/Support"/>
                        </copy>
                        
                        <!-- Use Dephi programe to convert TestComplete Raw Log from Xml into JUnit format. The JUnit format results is used by Jenkind to determine the job status. -->
                        <exec executable="${AntUtilities.${Machine}.dir}/TestCompleteResultsTransform.exe" failonerror="true" timeout="7200000">
                            <arg value="${Automation.TestResults.dir}"/>
                        </exec>
                        
                        <available file="${Automation.TestResults.dir}/Results.xml" property="JUnitReport.exists"/>
                        <echo>JUnit report generated: ${JUnitReport.exists}</echo>
                        
                    </try>
                    <catch>
                        <echo message="${errormessage}"/>
                    </catch>
                </trycatch>
            </then>
        </if>
    </target>
    
</project>
